{"version":3,"sources":["components/Controls/controls.module.scss","types.ts","store/store.ts","components/Controls/Controls.tsx","components/Notes/Note/Note.tsx","utils.ts","components/Notes/Notes.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Notes/Note/note.module.scss","components/Notes/notes.module.scss"],"names":["module","exports","NoteStatus","ActionTypes","Intervals","rootReducer","combineReducers","notes","state","action","storage","localStorage","getItem","result","JSON","parse","type","ADD_NOTE","concat","payload","REMOVE_NOTE","filter","note","id","CHANGE_NOTE","newState","forEach","element","index","setItem","stringify","Controls","useState","placeholder","setPlaceholder","text","expired","color","setState","dispatch","useDispatch","useEffect","placeholders","pos","Math","trunc","random","length","Paper","className","styles","controls","FormControl","fullWidth","InputLabel","htmlFor","Input","value","startAdornment","InputAdornment","position","fontSize","onChange","e","target","handleText","control_panel","additional","TextField","label","defaultValue","dateFormat","InputLabelProps","shrink","targetTime","Date","getTime","handleTime","color_label","style","backgroundColor","color_picker","name","Button","button","variant","onClick","uniqid","status","moment","diff","Waiting","Completed","addNote","disabled","Note","props","setTimer","isTimeOver","interval","createInterval","isLastMinutes","SECOND","MINUTE","clearInterval","completeNote","deleteNote","removeNote","ratio","period","setInterval","Card","borderColor","CardContent","content","Typography","CardActions","time","mask","difference","duration","years","months","days","hours","minutes","seconds","map","item","split","includes","getDateTime","join","size","View","Notes","List","view","setView","useSelector","settings","ToggleButtonGroup","exclusive","handleView","ToggleButton","list","grid","display","key","App","Fab","window","scrollTo","top","behavior","Boolean","location","hostname","match","store","createStore","undefined","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c75ec1f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"controls_controls__p5DzW\",\"control_panel\":\"controls_control_panel__1Nkv2\",\"additional\":\"controls_additional__A8IpI\",\"button\":\"controls_button__YKnOJ\",\"color\":\"controls_color__2oPaH\",\"color_label\":\"controls_color_label__kAzQR\",\"pulse\":\"controls_pulse__3l-ln\",\"color_picker\":\"controls_color_picker__1nXJx\",\"importance\":\"controls_importance__13qk_\"};","import {addNote, changeNote, removeNote} from \"./store/store\";\r\n\r\nexport type AppState = {\r\n    notes: NoteType[];\r\n};\r\n\r\nexport type Actions =\r\n  | ReturnType<typeof addNote>\r\n  | ReturnType<typeof removeNote>\r\n  | ReturnType<typeof changeNote>;\r\n\r\nexport enum NoteStatus {\r\n    Waiting,\r\n    Completed\r\n}\r\n\r\nexport type NoteType = {\r\n    id: string,\r\n    text: string,\r\n    expired: number,\r\n    status: NoteStatus,\r\n    color: string\r\n}\r\n\r\nexport enum ActionTypes {\r\n    ADD_NOTE,\r\n    REMOVE_NOTE,\r\n    CHANGE_NOTE\r\n}\r\n\r\nexport enum Intervals {\r\n    SECOND = 1000,\r\n    MINUTE = 1000 * 60\r\n}","import {combineReducers, createStore, Store} from \"redux\";\r\nimport {Actions, ActionTypes, AppState, NoteType} from \"../types\";\r\n\r\nexport function addNote(note: NoteType) {\r\n    return {\r\n        type: ActionTypes.ADD_NOTE,\r\n        payload: note,\r\n    } as const;\r\n}\r\n\r\nexport function removeNote(id: string) {\r\n    return {\r\n        type: ActionTypes.REMOVE_NOTE,\r\n        payload: id,\r\n    } as const;\r\n}\r\n\r\nexport function changeNote(note: NoteType) {\r\n    return {\r\n        type: ActionTypes.CHANGE_NOTE,\r\n        payload: note,\r\n    } as const;\r\n}\r\n\r\nfunction reducer(\r\n    state: NoteType[] = [],\r\n    action: Actions\r\n) {\r\n\r\n    const storage = localStorage.getItem('notes');\r\n\r\n    let result = storage ? JSON.parse(storage) as NoteType[] : state;\r\n\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_NOTE:\r\n            result = state.concat(action.payload);\r\n            break;\r\n        case ActionTypes.REMOVE_NOTE:\r\n            result = state.filter(\r\n              (note) => note.id !== action.payload\r\n            );\r\n            break;\r\n        case ActionTypes.CHANGE_NOTE:\r\n            const newState = [...state];\r\n            newState.forEach((element, index) => {\r\n                if (element.id === action.payload.id) {\r\n                    newState[index] = action.payload;\r\n                }\r\n            });\r\n            result = newState;\r\n            break;\r\n    }\r\n\r\n    localStorage.setItem('notes', JSON.stringify(result));\r\n\r\n    return result;\r\n}\r\n\r\nconst rootReducer = combineReducers<AppState>({\r\n    notes: reducer\r\n});\r\n\r\nexport function configureStore(): Store<AppState> {\r\n    return createStore(\r\n        rootReducer, undefined\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\r\nimport styles from './controls.module.scss';\r\nimport {Button, Paper, FormControl, Input, InputAdornment, InputLabel, TextField} from \"@material-ui/core\";\r\nimport ArrowForwardIosOutlinedIcon from '@material-ui/icons/ArrowForwardIosOutlined';\r\nimport dateFormat from 'dateformat';\r\nimport ColorPicker from 'material-ui-color-picker';\r\nimport {NoteType, NoteStatus} from \"../../types\";\r\nimport uniqid from 'uniqid';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addNote} from \"../../store/store\";\r\nimport moment from 'moment';\r\n\r\ntype ControlsState = {\r\n  text: string,\r\n  expired: number,\r\n  color: string\r\n}\r\n\r\nexport function Controls() {\r\n  const [placeholder, setPlaceholder] = useState('');\r\n  const [state, setState] = useState<ControlsState>({\r\n    text: '',\r\n    expired: 0,\r\n    color: '#FFFFFF'\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const placeholders = [\r\n      'Buy tickets',\r\n      'Meet Jessica',\r\n      'Do homework',\r\n      'Take medicine'\r\n    ]\r\n    const pos = Math.trunc(Math.random() * placeholders.length);\r\n    setPlaceholder(placeholders[pos]);\r\n  }, [])\r\n\r\n  const handleText = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const target = e.target;\r\n    setState(state => {\r\n      return {\r\n        ...state, text: target.value\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleTime = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const target = e.target;\r\n    const targetTime = new Date(target.value).getTime();\r\n    setState(state => {\r\n      return {\r\n        ...state, expired: targetTime\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleColor = (color: string) => {\r\n    setState(state => {\r\n      return {\r\n        ...state, color\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleClick = () => {\r\n    const note = {\r\n      ...state,\r\n      id: uniqid(),\r\n      status: moment().diff(state.expired) < 0 ? NoteStatus.Waiting : NoteStatus.Completed\r\n    } as NoteType;\r\n    dispatch(addNote(note));\r\n    setState({...state, text: ''});\r\n  }\r\n\r\n  return (\r\n    <Paper className={styles.controls}>\r\n      <FormControl fullWidth >\r\n        <InputLabel htmlFor=\"input-text\">Note text</InputLabel>\r\n        <Input\r\n          id=\"input-text\"\r\n          value={state.text}\r\n          placeholder={placeholder}\r\n          startAdornment={\r\n            <InputAdornment position=\"start\">\r\n              <ArrowForwardIosOutlinedIcon fontSize=\"small\" />\r\n            </InputAdornment>\r\n          }\r\n          onChange={e => handleText(e)}\r\n        />\r\n      </FormControl>\r\n      <section className={styles.control_panel}>\r\n        <section className={styles.additional}>\r\n          <TextField\r\n            id=\"date\"\r\n            label=\"End Time\"\r\n            type=\"datetime-local\"\r\n            defaultValue={dateFormat(state.expired, \"yyyy-mm-dd'T'HH:MM\")}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            onChange={e => handleTime(e)}\r\n          />\r\n          <section className={styles.color}>\r\n            <InputLabel htmlFor=\"input-color\" className={styles.color_label} style={{backgroundColor: state.color}}/>\r\n            <ColorPicker\r\n              className={styles.color_picker}\r\n              id=\"input-color\"\r\n              name='color'\r\n              defaultValue='#FFFFFF'\r\n              value={state.color}\r\n              onChange={handleColor}\r\n            />\r\n          </section>\r\n        </section>\r\n        <Button className={styles.button} variant=\"contained\" color=\"primary\" onClick={handleClick} disabled={!state.text}>\r\n          Add Note\r\n        </Button>\r\n      </section>\r\n    </Paper>\r\n  );\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport styles from './note.module.scss';\r\nimport {Intervals, NoteStatus, NoteType} from \"../../../types\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Button, Card, CardActions, CardContent, Typography} from \"@material-ui/core\";\r\nimport {changeNote, removeNote} from \"../../../store/store\";\r\nimport {getDateTime} from \"../../../utils\";\r\nimport moment from 'moment';\r\n\r\nexport function Note(props: NoteType) {\r\n\r\n  const {id, text, color, expired} = props;\r\n\r\n  const [timer, setTimer] = useState<Date>();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isTimeOver()) {\r\n      completeNote();\r\n      return;\r\n    }\r\n    const interval = createInterval(isLastMinutes() ? Intervals.SECOND : Intervals.MINUTE);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const completeNote = () => {\r\n    dispatch(changeNote({\r\n      ...props,\r\n      status: NoteStatus.Completed\r\n    }));\r\n  }\r\n\r\n  const deleteNote = () => {\r\n    dispatch(removeNote(id));\r\n  }\r\n\r\n  const isTimeOver = () => {\r\n    return -moment().diff(expired) <= Intervals.SECOND;\r\n  }\r\n\r\n  const isLastMinute = () => {\r\n    return -moment().diff(expired) < Intervals.MINUTE;\r\n  }\r\n\r\n  const isLastMinutes = (ratio = 2) => {\r\n    return -moment().diff(expired) < ratio * Intervals.MINUTE;\r\n  }\r\n\r\n  const createInterval = (period: Intervals) => {\r\n    let interval = setInterval(() => {\r\n      setTimer(new Date());\r\n      if (isLastMinutes() && period != Intervals.SECOND) {\r\n        clearInterval(interval);\r\n        interval = createInterval(Intervals.SECOND);\r\n      }\r\n      if (isTimeOver()) {\r\n        clearInterval(interval);\r\n        completeNote();\r\n      }\r\n    }, period);\r\n    return interval;\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    deleteNote();\r\n  }\r\n\r\n  const handleNoteDate = () => {\r\n    return getDateTime(expired, isLastMinute() ? 'sec' : 'y.m.d.h.min').join(' ');\r\n  }\r\n\r\n  return (\r\n    <Card style={{borderColor: color}} className={styles.note}>\r\n      <CardContent className={styles.content}>\r\n        <Typography variant=\"h5\">\r\n          {text}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions className={styles.action}>\r\n          {isTimeOver() ? (\r\n            <Typography className={styles.result} color=\"primary\" variant=\"subtitle2\">\r\n              Completed\r\n            </Typography>\r\n          ) : (\r\n            <Typography className={styles.result} variant=\"subtitle2\">\r\n              {handleNoteDate()}\r\n            </Typography>\r\n          )}\r\n        <Button size=\"small\" color=\"secondary\" variant=\"outlined\" onClick={handleDelete}>\r\n          Delete\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import moment from 'moment';\r\n\r\nexport function getDateTime(time: number, mask: string) {\r\n  const difference = moment.duration(moment().diff(time));\r\n  const date = [\r\n    { value: -difference.years(), name: 'y' },\r\n    { value: -difference.months(), name: 'm' },\r\n    { value: -difference.days(), name: 'd' },\r\n    { value: -difference.hours(), name: 'h' },\r\n    { value: -difference.minutes(), name: 'min' },\r\n    { value: -difference.seconds(), name: 'sec' }\r\n  ];\r\n  return date\r\n    .map(item => mask.split('.').includes(item.name) ? item : 0)\r\n    .filter(item => item && item.value !== 0)\r\n    .map(item => item && item.value + item.name);\r\n}","import React, {useState} from 'react';\r\nimport styles from './notes.module.scss';\r\nimport {AppState, NoteType} from \"../../types\";\r\nimport { Note } from \"./Note/Note\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Paper, Typography} from \"@material-ui/core\";\r\nimport {ToggleButton, ToggleButtonGroup} from '@material-ui/lab';\r\nimport AppsOutlinedIcon from '@material-ui/icons/AppsOutlined';\r\nimport ReorderOutlinedIcon from '@material-ui/icons/ReorderOutlined';\r\n\r\nenum View {\r\n  List = \"List\",\r\n  Grid = \"Grid\"\r\n}\r\n\r\nexport function Notes() {\r\n\r\n  const [view, setView] = useState(View.List);\r\n\r\n  const notes: NoteType[] = useSelector(\r\n    (state: AppState) => state.notes\r\n  );\r\n\r\n  const handleView = (value: string) => {\r\n    if (value !== null) {\r\n      setView(View[value as View]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Paper variant=\"outlined\" className={styles.notes}>\r\n      <section className={styles.settings}>\r\n        <Typography variant=\"h4\">\r\n          Remme\r\n        </Typography>\r\n        <ToggleButtonGroup\r\n          value={view}\r\n          exclusive\r\n          onChange={(e, value) => handleView(value)}\r\n        >\r\n          <ToggleButton value=\"List\">\r\n            <ReorderOutlinedIcon />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"Grid\">\r\n            <AppsOutlinedIcon />\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n      </section>\r\n      <section\r\n        className={view === View.List ? styles.list : styles.grid}\r\n        style={{display: notes.length ? \"flex\" : \"none\"}}\r\n      >\r\n        {notes.map(note => <Note key={note.id} {...note} />)}\r\n      </section>\r\n    </Paper>\r\n  );\r\n}\r\n","import React from 'react';\nimport './styles/app.scss';\nimport {Controls} from \"./components/Controls/Controls\";\nimport {Notes} from \"./components/Notes/Notes\";\nimport {Fab} from \"@material-ui/core\";\nimport ArrowUpwardOutlinedIcon from '@material-ui/icons/ArrowUpwardOutlined';\n\nfunction App() {\n\n  const handleClick = () => {\n    window.scrollTo({top: 0, behavior: 'smooth'});\n  }\n\n  return (\n      <main className=\"container\">\n        <Controls />\n        <Notes />\n        <Fab className=\"upper\" color=\"primary\" onClick={handleClick}>\n          <ArrowUpwardOutlinedIcon />\n        </Fab>\n      </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n        process.env.PUBLIC_URL || \"\",\n        window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    \"New content is available and will be used when all \" +\n                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log(\"Content is cached for offline use.\");\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error(\"Error during service worker registration:\", error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get(\"content-type\");\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf(\"javascript\") === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            \"No internet connection found. App is running in offline mode.\"\n        );\n      });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {configureStore} from \"./store/store\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"note\":\"note_note__k6LUo\",\"content\":\"note_content__joCLM\",\"action\":\"note_action__1a_X8\",\"result\":\"note_result__34qvM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notes\":\"notes_notes__1pv5g\",\"settings\":\"notes_settings__LcFNs\",\"list\":\"notes_list__1uwiI\",\"grid\":\"notes_grid__IWlUz\"};"],"sourceRoot":""}